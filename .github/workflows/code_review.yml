name: GPT Code Review

on:
  workflow_call:
    inputs:
      base_branch:
        description: 'Base branch to compare against'
        required: true
        type: string
    secrets:
      token:
        description: 'GitHub Token'
        required: true
      secret_url:
        description: 'Ngrok url'
        required: true

  # pull_request:
  #   types: [opened, synchronize, reopened]
  # workflow_dispatch:

jobs:
  code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.token }}
          secret_url: ${{ secrets.secret_url }}

      - name: Clone Scripts Repository if Empty
        run: |
          if [ ! -d /home/runner/work/code_review_bot/code_review_bot/clone ]; then
            mkdir -p /home/runner/work/code_review_bot/code_review_bot/clone
          fi
          ls -l /home/runner/work/code_review_bot/code_review_bot/clone
          if [ -z "$(ls -A /home/runner/work/code_review_bot/code_review_bot/clone)" ]; then
             git clone https://x-access-token:${{ secrets.token }}@github.com/andreea-ghe/code_review_bot.git /home/runner/work/code_review_bot/code_review_bot/clone
          else
             echo "Directory is not empty, skipping clone"
          fi

      - name: Cache Python Packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r /home/runner/work/code_review_bot/code_review_bot/clone/requirements.txt

      - name: Initialize package.json if missing
        run: |
          cd /home/runner/work/code_review_bot/code_review_bot/clone
          if [ ! -f "package.json" ]; then
            npm init -y
          fi
          npm install @octokit/core@latest node-fetch

      - name: Fetch Base Branch
        run: |
          git fetch origin ${{ inputs.base_branch }}:${{ inputs.base_branch }}

      - name: Create All Files Directory
        run: mkdir -p all_files

      - name: Copy All Files to Directory
        run: |
          all_files=$(git ls-tree -r HEAD --name-only)
          for file in $all_files; do
            dir_name=$(dirname "$file")
            mkdir -p "all_files/$dir_name"
            cp "$file" "all_files/$file"
          done

      - name: Run Python Script
        env:
          MY_URL: ${{ secrets.secret_url}}
        run: |
          changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
          # python3 /home/runner/work/code_review_bot/code_review_bot/clone/cr_bot.py "$changed_files"
          pylint $changed_files > reviews.txt
          
          cat reviews.txt

      - name: Get Latest Commit ID
        id: get_commit
        run: echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Add Code Suggestions Comments
        env:
          COMMIT_ID: ${{ github.event.pull_request.head.sha }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NUMBER: ${{ github.event.number }}
          GITHUB_TOKEN: ${{ secrets.token }}
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.token }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/OWNER/REPO/issues/${{ github.event.number }}/comments \
          -d '{"body":"$(cat $reviews.txt)"}'

